/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package blckchndemo;

import java.util.ArrayList;
import com.google.gson.GsonBuilder;

public class App {
    public static ArrayList<Block> blockchain = new ArrayList<>();

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // try {
        //     Runtime.getRuntime().exec("clear");
        // } catch(Exception e) {
        //     e.printStackTrace();
        // }
        System.out.println(System.getProperty("os.name"));

        System.out.println(new App().getGreeting());

        String[] genesisTransactions = {"A sent B 10 BTC", "B sent C 15 BTC"};
        Block genesisBlock = new Block(genesisTransactions, "0");
        System.out.println("Block 1 hash: " + genesisBlock.getHash());
        blockchain.add(genesisBlock);

        String[] block2Transactions = {"B sent C 20 BTC", "C sent A 10 BTC"};
        Block block2 = new Block(block2Transactions, genesisBlock.getHash());
        System.out.println("Block 2 hash: " + block2.getHash());
        blockchain.add(block2);

        String[] block3Transactions = {"B sent C 10 BTC", "C sent A 5 BTC"};
        Block block3 = new Block(block3Transactions, block2.getHash());
        System.out.println("Block 3 hash: " + block3.getHash());
        blockchain.add(block3);

        String blockchainJson = new GsonBuilder().setPrettyPrinting().create().toJson(blockchain);
        System.out.println(blockchainJson);
        System.out.println("===============================================================");
        System.out.println(StringUtils.getCurrentTime() + "Try mining block 1...");
        int difficulty = (int)(Math.random() * 10);
        System.out.println(StringUtils.getCurrentTime() + "Difficulty: " + difficulty);
        blockchain.get(0).mineBlock(difficulty);
        System.out.println(StringUtils.getCurrentTime() + "Keep mining block 1 with difficulty 5: ");
        blockchain.get(0).mineBlock(5);

    }

    public Boolean isChainValid() {
        Block currentBlock;
        Block previousBlock;

        for (int i = 1; i < blockchain.size(); i++) {
            currentBlock = blockchain.get(i);
            previousBlock = blockchain.get(i-1);

            if(!currentBlock.getHash().equals(currentBlock.calculateBlockHash())) {
                System.out.println("Block " + i + " is not valid");
                return false;
            }

            if(!previousBlock.getHash().equals(currentBlock.getPreviousHash())) {
                System.out.println("Previous hash of block " + i + " is not equal");
                return false;
            }
        }
        return true;
    }

}
